# Двоичное представление

# Напишите программу, которая принимает целое число от пользователя,
# преобразует его в двоичное представление и показывает, как оно будет храниться в памяти.
# В программе также должно быть отображено количество байтов, занимаемое числом.

# Напишите тут ваш код

# Запрашиваем у пользователя ввод целого числа
number = int(input("Введите целое число: "))

# Преобразуем число в двоичное представление (в виде строки)
binary_str = bin(number)

# Выводим двоичное представление числа
print(f"Двоичное представление: {binary_str}")

# Вычисляем количество байтов, занимаемое числом в памяти
num_bytes = (number.bit_length() + 7) // 8 if number != 0 else 1

# Выводим количество байтов
print(f"Количество байтов в памяти: {num_bytes}")

'''
        Пример работы программы:
        
        Введите целое число: 42
        Двоичное представление: 0b101010
        Количество байтов в памяти: 1
        
        Введите целое число: 256
        Двоичное представление: 0b100000000
        Количество байтов в памяти: 2
        
        Примечания:
        Функция bin() возвращает строку с префиксом 0b, который обозначает двоичное число.
        
        Метод bit_length() возвращает минимальное количество битов, необходимых для представления числа в двоичном 
        виде, исключая знак и ведущие нули.
        
        Формула (n.bit_length() + 7) // 8 вычисляет количество байтов, необходимых для хранения числа 
        (округляя вверх до целого числа байтов).
        
        Для числа 0 bit_length() возвращает 0, поэтому добавлена проверка, чтобы результат был не менее 1 байта.
'''



# Преобразуем число в десятичное
# Напишите программу, которая принимает двоичное целое число от пользователя,
# преобразует его в десятичное представление и показывает, как оно будет храниться
# в памяти.
# В программе также должно быть отображено количество байтов, занимаемое числом.
# Напишите тут ваш код

def binary_to_decimal(binary_str):
    decimal = 0
    length = len(binary_str)
    for i in range(length):
        if binary_str[i] == '1':
            decimal += 2 ** (length - 1 - i)
        elif binary_str[i] not in ('0', '1'):
            raise ValueError("Введенная строка не является двоичным числом")
    return decimal


# Ввод двоичного числа от пользователя
binary_input = input("Введите двоичное целое число: ")

try:
    # Преобразование в десятичное число
    decimal_number = binary_to_decimal(binary_input)

    # Вывод десятичного числа
    print(f"Десятичное представление: {decimal_number}")

    # Определение количества байтов, занимаемых числом в памяти
    # Для этого преобразуем число в байты (используем int, который в Python занимает разное количество байт)
    # Но в данном случае мы можем вычислить минимальное необходимое количество байт
    byte_count = (decimal_number.bit_length() + 7) // 8
    if byte_count == 0 and decimal_number == 0:
        byte_count = 1  # Число 0 занимает 1 байт

    print(f"Число занимает в памяти: {byte_count} байт(а)")

except ValueError as e:
    print(f"Ошибка: {e}")


'''
        Пример работы программы:

        Введите двоичное целое число: 1101
        Десятичное представление: 13
        Число занимает в памяти: 1 байт(а)
        
        
        Объяснение:
        Ввод данных: Пользователь вводит двоичное число в виде строки.
        
        Преобразование: Функция binary_to_decimal переводит двоичную строку в десятичное число.
        
        Вывод результата: Программа выводит десятичное представление числа.
        
        Расчет занимаемой памяти: Для расчета используется метод bit_length(), который возвращает минимальное 
        количество бит, необходимых для представления числа. Затем это значение переводится в байты 
        (1 байт = 8 бит). Если число равно 0, то оно занимает 1 байт.
        
        Эта программа корректно обрабатывает ввод и выводит нужную информацию.
'''