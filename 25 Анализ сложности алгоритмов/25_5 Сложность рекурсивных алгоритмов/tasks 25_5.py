# Сложность Фибоначчи
# Проанализируйте пространственную сложность рекурсивного алгоритма вычисления чисел
# Фибоначчи с использованием мемоизации.
# Подсказка: Пространственная сложность этого алгоритма включает в себя не только глубину
# рекурсивных вызовов,
# но и память, используемую для хранения значений в словаре memo.

def fibonacci(n, memo={}):
    if n in memo:
        return memo[n]
    if n <= 1:
        return n
    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)
    return memo[n]

# Пример использования:
print(fibonacci(10))  # Вывод: 55

# Пространственная сложность рекурсивного алгоритма вычисления чисел Фибоначчи равна
print("Пространственная сложность рекурсивного алгоритма вычисления чисел Фибоначчи равна ...")
print('O(n)')




# Сложность факториала

# Проанализируйте пространственную сложность рекурсивного алгоритма вычисления факториала числа n.
# def factorial(n):
# if n == 0:
# return 1
# else:
# return n * factorial(n-1)
# # Пример использования:
# print(factorial(5))  # Вывод: 120
# Подсказка: Пространственная сложность определяется максимальной глубиной рекурсивных вызовов
# Напишите тут ваш код

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

# Пример использования:
print(factorial(5))  # Вывод: 120

# Пространственная сложность рекурсивного алгоритма вычисления факториала числа n равна
print("Пространственная сложность рекурсивного алгоритма вычисления факториала числа n равна ...")
print('O(n)')